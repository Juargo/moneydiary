name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
        
      - name: Setup SSH directory
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          touch ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "Host digitalocean" >> ~/.ssh/config
          echo "  HostName ${{ secrets.DO_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.DO_USER }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          echo "  ServerAliveInterval 30" >> ~/.ssh/config
          echo "  ServerAliveCountMax 6" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: List files in workspace
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of docker directory (if exists):"
          ls -la docker || echo "Docker directory not found"
          echo "Docker subdirectories (if exist):"
          find docker -type d -ls 2>/dev/null || echo "No subdirectories found"
          echo "Docker files:"
          find docker -type f -ls 2>/dev/null || echo "No files found"

      - name: Prepare server directories
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Crear directorios necesarios en el servidor
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            mkdir -p ~/docker/nginx/conf.d
            mkdir -p ~/docker/scripts
            mkdir -p ~/docker/nginx/certs
            mkdir -p ~/docker/nginx/www
            mkdir -p ~/docker/data
          EOF

      - name: Copy configuration files
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Usar rutas absolutas y copiar archivos individuales
          WORKSPACE="${GITHUB_WORKSPACE}"
          echo "Copiando docker-compose.prod.yml"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${WORKSPACE}/docker/docker-compose.prod.yml" ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/docker-compose.prod.yml
          
          echo "Copiando archivos de configuración de nginx"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${WORKSPACE}/docker/nginx/app.conf" ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/docker/nginx/conf.d/
          
          echo "Copiando scripts"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${WORKSPACE}/docker/scripts/setup-ssl.sh" ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/docker/scripts/
          
          echo "Ajustando permisos de ejecución para scripts"
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} "chmod +x ~/docker/scripts/*.sh"

      - name: Create .env file on server
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          cat << EOF > .env
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_DB=${{ secrets.MYSQL_DB }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          BACKEND_URL=${{ secrets.BACKEND_URL }}
          DOMAIN=${{ secrets.DOMAIN }}
          SSL_EMAIL=${{ secrets.SSL_EMAIL }}
          EOF
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null .env ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/.env

      - name: Prepare deployment environment
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~
            mkdir -p docker/nginx/{conf.d,certs,www} docker/data
            
            # Actualizar configuración de Nginx con el dominio correcto
            if [ ! -z "$DOMAIN" ]; then
              sed -i "s/yourdomain.com/$DOMAIN/g" ~/docker/nginx/conf.d/app.conf
            fi
          EOF

      - name: Docker login and pull images
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~
            echo "Iniciando sesión en Docker..."
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            
            echo "Descargando imágenes Docker..."
            docker pull ghcr.io/juargo/moneydiary-api:latest
            docker pull ghcr.io/juargo/moneydiary-frontend:latest
          EOF

      - name: Start Docker services
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~
            echo "Deteniendo servicios existentes..."
            docker-compose -f docker-compose.prod.yml down || true
            
            echo "Iniciando servicios..."
            docker-compose -f docker-compose.prod.yml up -d
          EOF

      - name: Configure SSL certificates
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~
            # Configurar certificados SSL si no existen
            if [ ! -f ~/docker/nginx/certs/cert.pem ] && [ ! -z "$DOMAIN" ] && [ ! -z "$SSL_EMAIL" ]; then
              echo "Configurando certificados SSL..."
              ~/docker/scripts/setup-ssl.sh $DOMAIN $SSL_EMAIL production
            else
              echo "Los certificados SSL ya existen o falta la configuración necesaria."
            fi
            
            # Verificar el estado de los contenedores
            echo "Estado de los contenedores:"
            docker ps
          EOF
