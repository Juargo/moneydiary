name: Deploy Backend to Hostinger

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          # Crear un requirements.txt modificado sin las entradas conflictivas
          grep -v -E "pydantic|python-dateutil" requirements.txt > requirements-fixed.txt
          # Agregar versiones específicas de los paquetes conflictivos
          echo "pydantic==1.10.7" >> requirements-fixed.txt
          echo "python-dateutil==2.8.2" >> requirements-fixed.txt
          # Instalar desde el archivo modificado - solo para verificación, no para el despliegue
          pip install -r requirements-fixed.txt

      - name: Create deployment package
        run: |
          # Crear un directorio limpio para el despliegue
          mkdir -p deploy
          
          # Copiar solo los archivos necesarios, excluyendo archivos innecesarios
          cp backend/app.py deploy/
          cp backend/requirements.txt deploy/requirements-fixed.txt
          
          # Copiar directorios principales pero excluyendo archivos innecesarios
          mkdir -p deploy/app
          if [ -d "backend/app" ]; then
            cp -r backend/app/* deploy/app/ 2>/dev/null || :
          fi
          
          mkdir -p deploy/ddl
          if [ -d "backend/ddl" ]; then
            cp -r backend/ddl/* deploy/ddl/ 2>/dev/null || :
          fi
          
          # Crear archivo placeholder en ddl si no hay archivos
          echo "# Este directorio contiene scripts SQL y definiciones de la base de datos" > deploy/ddl/README.md
          
          # Crear archivo WSGI para Python
          cat > deploy/passenger_wsgi.py << 'EOL'
          import sys
          import os

          # Añadir el directorio actual al path de Python
          INTERP = os.path.expanduser("/usr/bin/python3")
          if sys.executable != INTERP:
              os.execl(INTERP, INTERP, *sys.argv)

          # Añadir directorio de la aplicación al path
          sys.path.append(os.getcwd())

          # Importar la aplicación desde app.py (ajusta según tu estructura)
          from app import app as application

          # Para depuración
          import logging
          logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
          EOL
          
          # Crear archivo .htaccess para Python
          cat > deploy/.htaccess << 'EOL'
          # Habilitar el motor de reescritura
          RewriteEngine On

          # No redirigir para archivos o directorios existentes
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d

          # Redirigir todas las solicitudes a passenger_wsgi.py
          RewriteRule ^(.*)$ passenger_wsgi.py/$1 [QSA,L]

          # Permitir encabezados CORS
          Header set Access-Control-Allow-Origin "*"
          Header set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
          Header set Access-Control-Allow-Headers "Content-Type, Authorization"
          EOL
          
          # Asegurar que los scripts tengan permisos de ejecución
          chmod +x deploy/*.py
          
          # Crear un archivo __init__.py básico en el directorio app si no existe
          if [ ! -f deploy/app/__init__.py ]; then
            echo "# Inicialización del paquete app" > deploy/app/__init__.py
            echo "from flask import Flask" >> deploy/app/__init__.py
            echo "app = Flask(__name__)" >> deploy/app/__init__.py
            echo "# Importa las rutas" >> deploy/app/__init__.py
            echo "try:" >> deploy/app/__init__.py
            echo "    import app.routes" >> deploy/app/__init__.py
            echo "except ImportError:" >> deploy/app/__init__.py
            echo "    pass  # Las rutas se configurarán más tarde" >> deploy/app/__init__.py
          fi
          
          # Lista el contenido del directorio para verificación
          echo "Contenido del directorio deploy:"
          find deploy -type f | sort
          
      - name: Deploy Backend to Hostinger
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.HOSTINGER_FTP_SERVER }}
          username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          local-dir: ./deploy/
          server-dir: ${{ secrets.HOSTINGER_API_PATH }}/
          dangerous-clean-slate: false  # Para no borrar archivos existentes
          concurrency: 1  # Limitar la concurrencia para evitar timeouts
          timeout: 120000  # Aumentar el timeout a 2 minutos
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/__pycache__/**
            **/venv/**
            **/*.pyc
