name: Build and Deploy Backend Docker Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}-api
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            # Asegurarse de que docker está instalado
            if ! command -v docker &> /dev/null; then
                echo "Docker no está instalado. Instalando..."
                curl -fsSL https://get.docker.com -o get-docker.sh
                sudo sh get-docker.sh
                sudo usermod -aG docker $USER
            fi
            
            # Configurar acceso a GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Crear directorio para la aplicación si no existe
            mkdir -p ~/moneydiary/data
            
            # Crear archivo .env para las variables de ambiente
            cat > ~/moneydiary/.env << 'EOL'
            # Variables de base de datos externa
            MYSQL_HOST=${{ secrets.MYSQL_HOST }}
            MYSQL_PORT=${{ secrets.MYSQL_PORT }}
            MYSQL_DB=${{ secrets.MYSQL_DB }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            
            # Variables de entorno para la aplicación
            ENV=production
            PORT=8000
            NODE_ENV=production
            
            # URLs y configuraciones
            BACKEND_URL=https://api.moneydiary.com
            FRONTEND_URL=https://moneydiary.com
            EOL
            
            # Copiar docker-compose.yml para producción sin MySQL
            cat > ~/moneydiary/docker-compose.yml << 'EOL'
            version: '3.8'
            
            services:
              # API Backend conectado a MySQL externo
              api:
                image: ghcr.io/${{ github.repository }}-api:latest
                container_name: moneydiary-api
                restart: always
                ports:
                  - "8000:8000"
                environment:
                  - MYSQL_HOST=${MYSQL_HOST}
                  - MYSQL_PORT=${MYSQL_PORT}
                  - MYSQL_DB=${MYSQL_DB}
                  - MYSQL_USER=${MYSQL_USER}
                  - MYSQL_PASSWORD=${MYSQL_PASSWORD}
                  - ENV=production
                volumes:
                  - ./data:/app/data
                networks:
                  - moneydiary-network
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 10s
                  
              # Frontend
              frontend:
                image: ghcr.io/${{ github.repository }}-frontend:latest
                container_name: moneydiary-frontend
                restart: always
                ports:
                  - "3000:80"
                environment:
                  - BACKEND_URL=${BACKEND_URL}
                networks:
                  - moneydiary-network
                depends_on:
                  - api
            
              # Servicio de proxy inverso para gestionar SSL y redirección de puertos
              nginx:
                image: nginx:alpine
                container_name: moneydiary-nginx
                restart: always
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - ./nginx/conf.d:/etc/nginx/conf.d
                  - ./nginx/certs:/etc/nginx/certs
                  - ./nginx/www:/var/www/html
                depends_on:
                  - api
                  - frontend
                networks:
                  - moneydiary-network
            
            # Redes
            networks:
              moneydiary-network:
                driver: bridge
            EOL
            
            # Crear directorio para archivos de Nginx
            mkdir -p ~/moneydiary/nginx/conf.d
            mkdir -p ~/moneydiary/nginx/certs
            mkdir -p ~/moneydiary/nginx/www
            
            # Crear configuración Nginx para el proxy inverso
            cat > ~/moneydiary/nginx/conf.d/default.conf << 'EOL'
            server {
                listen 80;
                server_name moneydiary.com www.moneydiary.com;
                
                # Redireccionar a HTTPS
                location / {
                    return 301 https://$host$request_uri;
                }
            }
            
            server {
                listen 443 ssl;
                server_name moneydiary.com www.moneydiary.com;
                
                # Certificados SSL (deberás configurarlos)
                ssl_certificate /etc/nginx/certs/fullchain.pem;
                ssl_certificate_key /etc/nginx/certs/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                
                # Frontend
                location / {
                    proxy_pass http://frontend:80;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
            }
            
            server {
                listen 80;
                server_name api.moneydiary.com;
                
                # Redireccionar a HTTPS
                location / {
                    return 301 https://$host$request_uri;
                }
            }
            
            server {
                listen 443 ssl;
                server_name api.moneydiary.com;
                
                # Certificados SSL (deberás configurarlos)
                ssl_certificate /etc/nginx/certs/fullchain.pem;
                ssl_certificate_key /etc/nginx/certs/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                
                # Backend API
                location / {
                    proxy_pass http://api:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    
                    # Configuración para WebSockets si es necesario
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
            }
            EOL
            
            # Script para configurar Certbot y generar certificados SSL
            cat > ~/moneydiary/setup-ssl.sh << 'EOL'
            #!/bin/bash
            
            # Instalar Certbot
            sudo apt-get update
            sudo apt-get install -y certbot
            
            # Obtener certificados (ajusta los dominios según sea necesario)
            sudo certbot certonly --standalone -d moneydiary.com -d www.moneydiary.com -d api.moneydiary.com
            
            # Copiar certificados al directorio de Nginx
            sudo cp /etc/letsencrypt/live/moneydiary.com/fullchain.pem ~/moneydiary/nginx/certs/
            sudo cp /etc/letsencrypt/live/moneydiary.com/privkey.pem ~/moneydiary/nginx/certs/
            
            # Ajustar permisos
            sudo chmod 644 ~/moneydiary/nginx/certs/*.pem
            EOL
            chmod +x ~/moneydiary/setup-ssl.sh
            
            # Desplegar usando docker-compose
            cd ~/moneydiary
            docker pull ghcr.io/${{ github.repository }}-api:latest
            docker-compose down || true
            docker-compose up -d
            
            # Verificar estado
            docker-compose ps
            
            # Probar la conexión a la base de datos MySQL externa
            echo "Probando conexión a la base de datos MySQL externa..."
            docker exec moneydiary-api python -m app.db.check_connection
            
            # Mostrar información sobre la conectividad
            echo "============================================="
            echo "INFORMACIÓN DE CONEXIÓN A MYSQL EXTERNO:"
            echo "============================================="
            echo "Host: ${MYSQL_HOST}"
            echo "Puerto: ${MYSQL_PORT}"
            echo "Base de datos: ${MYSQL_DB}"
            echo "Usuario: ${MYSQL_USER}"
            echo "============================================="
            echo "Si hay problemas de conexión, verifica:"
            echo "1. Que el servidor MySQL acepte conexiones remotas"
            echo "2. Que el usuario tenga permisos para conectarse desde esta IP"
            echo "3. Que el firewall no esté bloqueando la conexión"
            echo "============================================="
