name: Database Setup and Seeding en Producción

on:
  workflow_dispatch:  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub
  push:
    branches: [ main, master ]
    paths:
      - 'backend/app/db/**'  # Se ejecuta cuando hay cambios en la estructura de la base de datos

jobs:
  setup-database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
      
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
        
      - name: Setup SSH directory
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          touch ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "Host production" >> ~/.ssh/config
          echo "  HostName ${{ secrets.DO_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.DO_USER }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Transferir archivos al servidor
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Crear estructura de directorios necesaria
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            mkdir -p ~/backend/app/db/models
            mkdir -p ~/backend/app/db/seeds
            mkdir -p ~/backend/app/db/migrations
          EOF
          
          # Transferir solo los archivos necesarios
          echo "Copiando archivos principales"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/schema_creator.py \
            backend/seeder.py \
            backend/app/__init__.py \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/
          
          echo "Copiando archivos de configuración de la base de datos"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/app/db/__init__.py \
            backend/app/db/config.py \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/app/db/
          
          echo "Copiando modelos"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/app/db/models/* \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/app/db/models/
          
          echo "Copiando seeds"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/app/db/seeds/__init__.py \
            backend/app/db/seeds/banks.py \
            backend/app/db/seeds/users.py \
            backend/app/db/seeds/user_banks.py \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/app/db/seeds/
          
          # Copiar requirements.txt si existe
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/requirements.txt \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/ || echo "requirements.txt no encontrado"

      - name: Preparar entorno Python y dependencias
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~/backend
            
            # Verificar directorio actual y su contenido
            echo "Directorio actual: $(pwd)"
            ls -la
            
            # Verificar la versión de Python instalada
            echo "Python version:"
            python3 --version || python --version
            
            # Asegurarse de que pip está instalado en el sistema
            echo "Verificando pip a nivel del sistema:"
            if ! command -v pip3 &> /dev/null && ! command -v pip &> /dev/null; then
                echo "Pip no encontrado, instalando..."
                sudo yum install -y python3-pip || sudo apt-get install -y python3-pip
            fi
            
            # Eliminar entorno virtual anterior si hay problemas
            echo "Eliminando entorno virtual anterior si existe..."
            rm -rf venv
            
            # Crear nuevo entorno virtual
            echo "Creando entorno virtual..."
            python3 -m venv venv
            
            # Verificar la estructura del entorno virtual
            echo "Verificando estructura del entorno virtual:"
            ls -la venv/bin
            
            # Instalar dependencias directamente con la ruta completa al pip del entorno virtual
            echo "Instalando dependencias..."
            ~/backend/venv/bin/pip install --upgrade pip
            ~/backend/venv/bin/pip install tortoise-orm aiomysql asyncpg
            
            if [ -f requirements.txt ]; then
                echo "Instalando desde requirements.txt"
                ~/backend/venv/bin/pip install -r requirements.txt
            fi
            
            echo "Paquetes instalados:"
            ~/backend/venv/bin/pip list
          EOF

      - name: Crear archivo de variables de entorno
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          cat << EOF > .env
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_DB=${{ secrets.MYSQL_DB }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          EOF
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null .env ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/.env

      - name: Ejecutar scripts de base de datos
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~/backend
            
            # Usar la ruta absoluta a Python del entorno virtual
            PYTHON=~/backend/venv/bin/python
            
            # Cargar variables de entorno
            if [ -f .env ]; then
              echo "Cargando variables de entorno..."
              export $(cat .env | xargs)
            fi
            
            echo "Variables de entorno configuradas:"
            echo "MYSQL_HOST: $MYSQL_HOST"
            echo "MYSQL_DB: $MYSQL_DB"
            
            # Ajustar PYTHONPATH
            export PYTHONPATH=~/backend:$PYTHONPATH
            
            echo "Verificando estructura del directorio backend/app:"
            ls -la app
            
            echo "Creando esquema de base de datos..."
            $PYTHON schema_creator.py
            
            echo "Ejecutando seeds para poblar la base de datos..."
            $PYTHON seeder.py
            
            echo "Proceso completado."
          EOF
