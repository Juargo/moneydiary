name: Database Setup and Seeding en Producción

on:
  workflow_dispatch:  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub
  push:
    branches: [ main, master ]
    paths:
      - 'backend/app/db/**'  # Se ejecuta cuando hay cambios en la estructura de la base de datos

jobs:
  setup-database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
      
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
        
      - name: Setup SSH directory
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          touch ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "Host production" >> ~/.ssh/config
          echo "  HostName ${{ secrets.DO_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.DO_USER }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Transferir archivos al servidor
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          echo "Creando directorio de backend si no existe"
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} "mkdir -p ~/backend/app/db"
          
          echo "Copiando todo el directorio backend al servidor"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r backend/* ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/

      - name: Preparar entorno Python
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~/backend
            
            # Verificar directorio actual y su contenido
            echo "Directorio actual: $(pwd)"
            ls -la
            
            # Crear entorno virtual si no existe
            if [ ! -d "venv" ]; then
              echo "Creando entorno virtual..."
              python3 -m venv venv
            fi
            
            # Activar entorno virtual e instalar dependencias
            echo "Activando entorno virtual e instalando dependencias..."
            source venv/bin/activate
            pip install --upgrade pip
            pip install tortoise-orm
            pip install -r requirements.txt || echo "No se encontró requirements.txt"
          EOF

      - name: Ejecutar scripts de base de datos
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~/backend
            echo "Activando entorno virtual..."
            source venv/bin/activate
            
            echo "Verificando estructura de directorios y archivos:"
            ls -la
            ls -la app/db || echo "Directorio app/db no encontrado"
            
            echo "Creando esquema de base de datos..."
            python schema_creator.py
            
            echo "Ejecutando seeds para poblar la base de datos..."
            python seeder.py
            
            echo "Proceso completado."
          EOF
