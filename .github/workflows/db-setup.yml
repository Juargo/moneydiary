name: Database Setup and Seeding en Producción

on:
  workflow_dispatch:  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub
  push:
    branches: [ main, master ]
    paths:
      - 'backend/app/db/**'  # Se ejecuta cuando hay cambios en la estructura de la base de datos

jobs:
  setup-database:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
      
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
        
      - name: Setup SSH directory
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          touch ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "Host production" >> ~/.ssh/config
          echo "  HostName ${{ secrets.DO_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.DO_USER }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Transferir archivos al servidor
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Crear estructura de directorios necesaria
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            mkdir -p ~/backend/app/db/models
            mkdir -p ~/backend/app/db/seeds
            mkdir -p ~/backend/app/db/migrations
          EOF
          
          # Transferir solo los archivos necesarios
          echo "Copiando archivos principales"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/schema_creator.py \
            backend/seeder.py \
            backend/app/__init__.py \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/
          
          echo "Copiando archivos de configuración de la base de datos"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/app/db/__init__.py \
            backend/app/db/config.py \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/app/db/
          
          echo "Copiando modelos"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/app/db/models/__init__.py \
            backend/app/db/models/bank.py \
            backend/app/db/models/user.py \
            backend/app/db/models/user_bank.py \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/app/db/models/
          
          echo "Copiando seeds"
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/app/db/seeds/__init__.py \
            backend/app/db/seeds/banks.py \
            backend/app/db/seeds/users.py \
            backend/app/db/seeds/user_banks.py \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/app/db/seeds/
          
          # Copiar requirements.txt si existe
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            backend/requirements.txt \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:~/backend/ || echo "requirements.txt no encontrado"

      - name: Preparar entorno Python
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~/backend
            
            # Verificar directorio actual y su contenido
            echo "Directorio actual: $(pwd)"
            ls -la
            
            # Crear entorno virtual si no existe
            if [ ! -d "venv" ]; then
              echo "Creando entorno virtual..."
              python3 -m venv venv || python -m venv venv
            fi
            
            # Activar entorno virtual e instalar dependencias
            echo "Activando entorno virtual e instalando dependencias..."
            source venv/bin/activate || . venv/bin/activate
            
            # Actualizar pip e instalar requerimientos básicos
            echo "Actualizando pip e instalando dependencias esenciales..."
            pip install --upgrade pip
            
            # Instalar tortoise-orm y otras dependencias específicas
            echo "Instalando tortoise-orm y dependencias relacionadas..."
            pip install tortoise-orm==0.19.3 aiomysql asyncpg
            
            # Instalar desde requirements.txt si existe
            if [ -f "requirements.txt" ]; then
              echo "Instalando dependencias desde requirements.txt..."
              pip install -r requirements.txt
            else 
              echo "No se encontró requirements.txt, continuando con dependencias básicas"
            fi
            
            # Confirmar instalación de tortoise-orm
            echo "Verificando instalación de tortoise-orm:"
            pip list | grep tortoise
          EOF

      - name: Ejecutar scripts de base de datos con variables de entorno
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=6 ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            cd ~/backend
            echo "Activando entorno virtual..."
            source venv/bin/activate || . venv/bin/activate
            
            echo "Verificando estructura de directorios y archivos:"
            ls -la
            ls -la app/db || echo "Directorio app/db no encontrado"
            
            # Establecer variables de entorno para la base de datos
            export MYSQL_HOST=${MYSQL_HOST:-"localhost"}
            export MYSQL_PORT=${MYSQL_PORT:-3306}
            export MYSQL_DB=${MYSQL_DB:-"moneydiary"}
            export MYSQL_USER=${MYSQL_USER:-"root"}
            export MYSQL_PASSWORD=${MYSQL_PASSWORD:-"password"}
            
            echo "Variables de entorno configuradas. Usando base de datos: $MYSQL_DB en $MYSQL_HOST"
            
            echo "Verificando configuración de Python:"
            which python
            python --version
            
            echo "Verificando PYTHONPATH:"
            export PYTHONPATH=$PYTHONPATH:$(pwd)
            echo $PYTHONPATH
            
            echo "Creando esquema de base de datos..."
            python schema_creator.py
            
            echo "Ejecutando seeds para poblar la base de datos..."
            python seeder.py
            
            echo "Proceso completado."
          EOF
