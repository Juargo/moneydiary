---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import ContableApp from '../components/ContableApp';
import '../styles/global.css';

// Fetch transaction data from GraphQL API
const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8000/graphql';
const userId = 1; // In a real app, get this from authentication

// GraphQL query using the userTransactions endpoint
const query = `
  query GetUserTransactions($userId: Int!) {
    userTransactions(userId: $userId) {
      id
      transactionDate
      description
      amount
      type
      userBankId
      subcategoryId
      userBankName
      bankName
      subcategoryName
      categoryName
    }
  }
`;

let transactions = [];
try {
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query,
      variables: { userId },
    }),
  });
  
  const result = await response.json();
  if (result.data && result.data.userTransactions) {
    transactions = result.data.userTransactions.map(tx => {
      // Format the date (comes as ISO string)
      const date = new Date(tx.transactionDate);
      const formattedDate = date.toISOString().split('T')[0];
      
      // Determine if it's an expense based on the type
      const isExpense = tx.type === 'Gasto';
      
      // Format the amount with a sign and as currency
      const sign = isExpense ? '-' : '+';
      const formattedAmount = `${sign}$${Math.abs(tx.amount).toLocaleString('es-ES', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      })}`;
      
      return {
        ...tx,
        date: formattedDate,
        isExpense,
        formattedAmount,
        // Use categoryName for the category display
        category: tx.categoryName,
      };
    });
  }
} catch (error) {
  console.error('Error fetching transactions:', error);
  // Provide empty array for transactions if fetch fails
  transactions = [];
}

// Get unique categories for the filter dropdown
const categories = [...new Set(transactions.map(tx => tx.categoryName))];
---

<DashboardLayout title="Transacciones">
  <ContableApp client:load />

  <div class="mb-6">
    <div class="flex justify-between items-center">
      <h1 class="text-2xl font-bold text-gray-800">Administra tus Transacciones</h1>
      <button class="bg-primary-600 hover:bg-primary-700 text-white py-2 px-4 rounded-lg flex items-center">
        <i class="fas fa-plus mr-2"></i> Nueva Transacción
      </button>
    </div>
  </div>
  
  <div class="bg-white rounded-lg shadow">
    <div class="p-6 border-b border-gray-200">
      <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div class="flex gap-4 flex-wrap">
          <div class="w-full md:w-64">
            <label class="block text-sm font-medium text-gray-700 mb-1">Buscar</label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="fas fa-search text-gray-400"></i>
              </div>
              <input type="text" class="pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring focus:ring-primary-200 focus:ring-opacity-50">
            </div>
          </div>
          <div class="w-full md:w-40">
            <label class="block text-sm font-medium text-gray-700 mb-1">Categoría</label>
            <select class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring focus:ring-primary-200 focus:ring-opacity-50">
              <option value="">Todas</option>
              {categories.map(category => (
                <option value={category}>{category}</option>
              ))}
            </select>
          </div>
          <div class="w-full md:w-40">
            <label class="block text-sm font-medium text-gray-700 mb-1">Tipo</label>
            <select class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring focus:ring-primary-200 focus:ring-opacity-50">
              <option value="">Todos</option>
              <option value="Gasto">Gastos</option>
              <option value="Ingreso">Ingresos</option>
            </select>
          </div>
          <div class="w-full md:w-40">
            <label class="block text-sm font-medium text-gray-700 mb-1">Fecha</label>
            <input type="month" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring focus:ring-primary-200 focus:ring-opacity-50">
          </div>
        </div>
        <div class="flex gap-2">
          <button class="border border-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-100">
            <i class="fas fa-filter mr-2"></i> Filtrar
          </button>
          <button class="border border-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-100">
            <i class="fas fa-redo mr-2"></i> Resetear
          </button>
        </div>
      </div>
    </div>
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Descripción</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoría</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subcategoría</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cuenta</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Monto</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {transactions.length > 0 ? (
            transactions.map(tx => (
              <tr>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{tx.description}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{tx.categoryName}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{tx.subcategoryName}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{tx.userBankName} ({tx.bankName})</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{tx.date}</td>
                <td class={`px-6 py-4 whitespace-nowrap text-sm font-medium text-right ${tx.isExpense ? 'text-red-600' : 'text-green-600'}`}>
                  {tx.formattedAmount}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <button class="text-primary-600 hover:text-primary-900 mr-3">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="text-red-600 hover:text-red-900">
                    <i class="fas fa-trash"></i>
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colspan="7" class="px-6 py-4 text-center text-gray-500">
                No se encontraron transacciones. {transactions.length === 0 && "Por favor, verifica la conexión con el API."}
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
    <div class="px-6 py-4 border-t border-gray-200 flex items-center justify-between">
      <div class="text-sm text-gray-700">
        Mostrando <span class="font-medium">1</span> a <span class="font-medium">{transactions.length}</span> de <span class="font-medium">{transactions.length}</span> resultados
      </div>
      <div class="flex gap-2">
        <button class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50" disabled={transactions.length <= 10}>
          Anterior
        </button>
        <button class="px-4 py-2 border border-gray-300 bg-primary-50 rounded-md text-sm font-medium text-primary-700 hover:bg-primary-100">
          1
        </button>
        {transactions.length > 10 && (
          <button class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
            2
          </button>
        )}
        {transactions.length > 20 && (
          <button class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
            3
          </button>
        )}
        <button class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50" disabled={transactions.length <= 10}>
          Siguiente
        </button>
      </div>
    </div>
  </div>
</DashboardLayout>
