---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import '../styles/global.css';

// GraphQL queries
const BUDGETS_QUERY = `
  query GetBudgets($userId: Int!) {
    budgets(userId: $userId) {
      id
      name
      description
    }
  }
`;

const CATEGORIES_QUERY = `
  query GetCategories($budgetId: Int!) {
    categories(budgetId: $budgetId) {
      id
      name
      description
    }
  }
`;

const SUBCATEGORIES_QUERY = `
  query GetSubcategories($categoryId: Int!) {
    subcategories(categoryId: $categoryId) {
      id
      name
    }
  }
`;

const PATTERNS_QUERY = `
  query GetPatterns($subcategoryId: Int!) {
    patterns(subcategoryId: $subcategoryId) {
      id
      expName
    }
  }
`;

// Fetch data from GraphQL API
async function fetchGraphQL(query: string, variables: Record<string, any> = {}) {
  const response = await fetch('http://localhost:8000/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query,
      variables,
    }),
  });

  if (!response.ok) {
    throw new Error(`GraphQL request failed: ${response.statusText}`);
  }

  const result = await response.json();
  return result.data;
}

// Mock user ID - in a real application, this would come from authentication
const userId = 1;

// Fetch all needed data
let budgetData = [];
try {
  // Fetch budgets
  const budgetsData = await fetchGraphQL(BUDGETS_QUERY, { userId });
  
  if (budgetsData && budgetsData.budgets) {
    // For each budget, fetch categories
    for (const budget of budgetsData.budgets) {
      const categoriesData = await fetchGraphQL(CATEGORIES_QUERY, { budgetId: budget.id });
      
      const categories = [];
      if (categoriesData && categoriesData.categories) {
        // For each category, fetch subcategories
        for (const category of categoriesData.categories) {
          const subcategoriesData = await fetchGraphQL(SUBCATEGORIES_QUERY, { categoryId: category.id });
          
          const subcategories = [];
          if (subcategoriesData && subcategoriesData.subcategories) {
            // For each subcategory, fetch patterns
            for (const subcategory of subcategoriesData.subcategories) {
              const patternsData = await fetchGraphQL(PATTERNS_QUERY, { subcategoryId: subcategory.id });
              
              subcategories.push({
                ...subcategory,
                patterns: patternsData?.patterns || []
              });
            }
          }
          
          // Calculate category totals
          const limit = 1000; // This would ideally come from the API
          const spent = 800; // This would be calculated from transactions in a real app
          const remaining = limit - spent;
          const progress = (spent / limit) * 100;
          
          categories.push({
            ...category,
            subcategories,
            limit,
            spent,
            remaining,
            progress
          });
        }
      }
      
      budgetData.push({
        ...budget,
        categories
      });
    }
  }
} catch (error) {
  console.error('Error fetching data:', error);
  // Fallback to mock data if the API request fails
  budgetData = [{
    id: 1,
    name: "Presupuesto Mensual",
    description: "Mi presupuesto para gastos mensuales",
    categories: [
      {
        id: 1,
        name: "Comida",
        description: "Gastos relacionados con alimentación",
        limit: 400,
        spent: 320,
        remaining: 80,
        progress: 80,
        subcategories: [
          {
            id: 1,
            name: "Supermercado",
            patterns: [
              { id: 1, expName: "Mercadona" },
              { id: 2, expName: "Carrefour" }
            ]
          },
          {
            id: 2,
            name: "Restaurantes",
            patterns: [
              { id: 3, expName: "McDonalds" },
              { id: 4, expName: "Restaurante" }
            ]
          }
        ]
      },
      {
        id: 2,
        name: "Transporte",
        description: "Gastos de transporte y movilidad",
        limit: 200,
        spent: 175,
        remaining: 25,
        progress: 87.5,
        subcategories: [
          {
            id: 3,
            name: "Público",
            patterns: [
              { id: 5, expName: "Metro" },
              { id: 6, expName: "Bus" }
            ]
          },
          {
            id: 4,
            name: "Privado",
            patterns: [
              { id: 7, expName: "Gasolina" },
              { id: 8, expName: "Taller" }
            ]
          }
        ]
      },
      {
        id: 3,
        name: "Entretenimiento",
        description: "Ocio y diversión",
        limit: 150,
        spent: 90,
        remaining: 60,
        progress: 60,
        subcategories: [
          {
            id: 5,
            name: "Streaming",
            patterns: [
              { id: 9, expName: "Netflix" },
              { id: 10, expName: "Spotify" }
            ]
          }
        ]
      }
    ]
  }];
}

// Calculate summary statistics for the entire budget
const allCategories = budgetData.flatMap(budget => budget.categories || []);
const totalBudgeted = allCategories.reduce((sum: number, cat: any) => sum + cat.limit, 0);
const totalSpent = allCategories.reduce((sum: number, cat: any) => sum + cat.spent, 0);
const totalRemaining = totalBudgeted - totalSpent;
---

<DashboardLayout title="Presupuestos">
  <div class="mb-6">
    <div class="flex justify-between items-center">
      <h1 class="text-2xl font-bold text-gray-800">Administra tus Presupuestos</h1>
      <button class="bg-primary-600 hover:bg-primary-700 text-white py-2 px-4 rounded-lg flex items-center">
        <i class="fas fa-plus mr-2"></i> Nuevo Presupuesto
      </button>
    </div>
  </div>

  <div class="bg-white rounded-lg shadow p-6 mb-6">
    <h2 class="text-lg font-semibold mb-4">Resumen de Presupuestos</h2>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="p-4 bg-green-50 border border-green-200 rounded-lg">
        <h3 class="text-sm text-green-700 font-medium">Total Presupuestado</h3>
        <p class="text-2xl font-bold text-green-800">${totalBudgeted.toFixed(2)}</p>
      </div>
      <div class="p-4 bg-blue-50 border border-blue-200 rounded-lg">
        <h3 class="text-sm text-blue-700 font-medium">Total Gastado</h3>
        <p class="text-2xl font-bold text-blue-800">${totalSpent.toFixed(2)}</p>
      </div>
      <div class="p-4 bg-indigo-50 border border-indigo-200 rounded-lg">
        <h3 class="text-sm text-indigo-700 font-medium">Total Disponible</h3>
        <p class="text-2xl font-bold text-indigo-800">${totalRemaining.toFixed(2)}</p>
      </div>
    </div>
  </div>
  
  <!-- Accordion View for Budget > Categories > Subcategories > Patterns -->
  <div class="space-y-4 mb-6">
    {budgetData.map((budget, budgetIndex) => (
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <!-- Budget Level -->
        <details open class="group">
          <summary class="flex justify-between items-center p-5 cursor-pointer bg-gray-50 hover:bg-gray-100">
            <div class="flex items-center gap-2">
              <i class="fas fa-wallet text-primary-600"></i>
              <h3 class="text-lg font-semibold">{budget.name}</h3>
            </div>
            <div class="flex items-center gap-4">
              <span class="text-sm text-gray-500 hidden md:inline">{budget.description}</span>
              <i class="fas fa-chevron-down transform group-open:rotate-180 transition-transform"></i>
            </div>
          </summary>
          
          <!-- Categories Level -->
          <div class="p-5 space-y-3">
            {budget.categories && budget.categories.map((category: { id: number; name: string; description: string; limit: number; spent: number; remaining: number; progress: number; subcategories: { id: number; name: string; patterns: { id: number; expName: string }[] }[] }, catIndex: number) => (
              <details class="group border border-gray-200 rounded-lg">
                <summary class="flex justify-between items-center p-4 cursor-pointer hover:bg-gray-50">
                  <div class="flex flex-col">
                    <h4 class="font-medium">{category.name}</h4>
                    <p class="text-sm text-gray-500">{category.description}</p>
                  </div>
                  <div class="flex items-center gap-4">
                    <div class="text-right">
                      <div class="text-sm">
                        <span class="text-gray-500">Gastado:</span> 
                        <span class="font-medium">${category.spent.toFixed(2)}</span> / 
                        <span class="font-medium">${category.limit.toFixed(2)}</span>
                      </div>
                      <div class="w-32 bg-gray-200 rounded-full h-2.5 mt-1">
                        <div class={`h-2.5 rounded-full ${
                          category.progress >= 100 
                            ? 'bg-red-600' 
                            : category.progress > 75 
                              ? 'bg-yellow-500' 
                              : 'bg-green-600'
                        }`} style={`width: ${Math.min(category.progress, 100)}%`}></div>
                      </div>
                    </div>
                    <i class="fas fa-chevron-down transform group-open:rotate-180 transition-transform"></i>
                  </div>
                </summary>
                
                <!-- Subcategories Level -->
                <div class="p-4 pt-2 border-t border-gray-100">
                  {category.subcategories && category.subcategories.map((subcategory, subIndex) => (
                    <details class="group ml-4 border-l-2 border-gray-200 pl-4 mb-2">
                      <summary class="flex justify-between items-center py-2 cursor-pointer">
                        <h5 class="font-medium">{subcategory.name}</h5>
                        <i class="fas fa-chevron-down transform group-open:rotate-180 transition-transform"></i>
                      </summary>
                      
                      <!-- Patterns Level -->
                      {subcategory.patterns && subcategory.patterns.length > 0 ? (
                        <div class="pl-4 py-2 space-y-1">
                          <h6 class="text-xs uppercase text-gray-500 mb-1">Patrones de transacciones</h6>
                          <ul class="space-y-1">
                            {subcategory.patterns.map((pattern) => (
                              <li class="text-sm py-1 px-2 bg-gray-50 rounded flex justify-between items-center">
                                <span>{pattern.expName}</span>
                                <div class="flex gap-2">
                                  <button class="text-primary-600 hover:text-primary-800 text-xs">
                                    <i class="fas fa-edit"></i>
                                  </button>
                                  <button class="text-red-600 hover:text-red-800 text-xs">
                                    <i class="fas fa-trash"></i>
                                  </button>
                                </div>
                              </li>
                            ))}
                          </ul>
                        </div>
                      ) : (
                        <p class="text-sm text-gray-500 py-2 pl-4">No hay patrones definidos</p>
                      )}
                    </details>
                  ))}
                  
                  <div class="flex justify-end mt-2 pt-2 border-t border-gray-100">
                    <button class="text-primary-600 hover:text-primary-800 text-sm">
                      <i class="fas fa-plus mr-1"></i> Añadir Subcategoría
                    </button>
                  </div>
                </div>
              </details>
            ))}
            
            <div class="flex justify-end mt-4">
              <button class="text-primary-600 hover:text-primary-800 text-sm">
                <i class="fas fa-plus mr-1"></i> Añadir Categoría
              </button>
            </div>
          </div>
        </details>
      </div>
    ))}
  </div>
</DashboardLayout>

<script>
  // Initialize all details elements to be closed initially
  // except for the main budget level
  document.addEventListener('DOMContentLoaded', () => {
    const allDetails = document.querySelectorAll('details:not(.group)');
    allDetails.forEach(detail => {
      (detail as HTMLDetailsElement).open = false;
    });
  });
</script>
